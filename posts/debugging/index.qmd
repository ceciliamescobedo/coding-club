---
title: "Debugging in R"
description: "Tools and tips"
author: "NÃºria Estanyol"
date: "2023-06-21"
date-modified: last-modified
categories: 
  - Debugging
  - Error messages
  - Namespace issues
  - Function documentation
---

> This session was recorded and uploaded on YouTube here:

{{< video https://youtu.be/eZtXI2hSZXI >}}

Debugging is a very broad topic, encompassing a wide array of scenarios
and highly context-specific. We can encounter diverse challenges that
need to adopt different debugging methods depending on the problems we
encounter.

Here we illustrate some of the fundamental steps to prevent bugs from
happening and address some of the most common debugging strategies.

## Error messages

The initial step in debugging is to understand the error message. Error
messages are often quite explicit, offering hints of the type of errors,
locations, and suggestions to fix the issues.

Don't be alarmed by error messages! encountering them is very common and
a regular part of the process no mater of your skill level. Getting used
to the presence of error messages and learning to read them is
essential. Indeed, the very first step of debugging is to read the error
message. Let's begin with a straightforward example:

```{r}
#| error: true
sum(c("a","b"))
```

The `c()` function aggregates elements into a vector and the `sum()`
function comptues the total of numerical values. As we can't calculate
the sum of letters, this leads to an issue. The prompted error message
provides a clue saying this is an *invalid "type"* assertion, suggesting
a character input.

## Reread your code

The second step of debugging involves rereading your code when
encountering an error.

In many instances, a significant part of the issues we face during
coding is overlooking a comma, a bracket, or making a typographical
error. In this case, we forgot a comma In the following case, we forgot
a comma. Unfortunately, the error message is not very helpful in this
case:

```{r}
#| error: true
paste("Hi!" "what's up?")
```

## Function documentation

In the previous example, if we understand the functionality of the
`paste()` function, we can identify the source of the error.

We can access the function documentation (Image 1) by either clicking on
the function name and pressing F1, or by typing "?paste" or
"help(paste)" directly into the console.

![Image 1: Documentation for the paste()
function.](images/help_documentation.png){#image-help-documentation
align="center"}

## Namespace issues

Namespace issues occur when we believe we're utilizing a function from a
particular package, but we're actually using a function from a different
package.

For instance, consider the case of attempting to filter values within
the CO2 dataset from the **magrittr** package:

```{r}
#| error: true
library(magrittr)
CO2 %>% filter(uptake>30)
```

When running this code snippet triggers an error, indicating that the
"uptake" object cannot be found. Why is that the case? From a
programming perspective, it's possible for multiple functions with the
same name to coexist, and when loading them collectively, certain
function names may get overridden. In this particular case, our
intention was to employ the `filter()`function from the **dplyr**
package; however, the `filter()`function from the **stats** package is
being utilized instead. We can verify this by referring to the function
documentation (by placing the cursor on the `filter()`function and
pressing CTRL+F1), as seen in Image 2.

![Filter stats](images/filter_stats.png){#image-filter-stats
align="center"}

This can frequently occur when you have multiple packages loaded, and
you may not always ensure that the functions are being overwritten or
not. a lot when you have a bunch of packages that you are loading and
you don't necessarily check make sure that the functions are overwritten
or not.

When actually employing the `filter()`function form the **dplyr**
package, we succeed in filtering the values:

```{r}
#| error: true
#| message: false
library(dplyr)
CO2 %>% filter(uptake>30)
```

[**How to prevent Namespace issues?**]{.underline}

The following function can be used as a tool to find conflicts amongst
the set of packages that are loaded in our session:

```{r}
conflicted::conflict_scout()
```

Thanks to this function we can visualize that there are two possible
conflicts with the `filter()`and `lag()` functions, which exist in both
packages **dplyr** and **stats**.

Another good practice is to specify the packages in the functions like
follows:

```{r}
#| eval: false
stats::filter()
```

in the previous case, we specify that we want to use the `filter`
function in the **stats** package.

## Reload, reinstall packages and start R session

The following error informs us that one the packages is needing a higher
version of another package than the one is currently loaded:

![Image 3: Version errors](images/dplyr_error.png){#image-version-error
align="center"}

To solve this issue, you can try:

1.  Reinstall packages. The following code string will force the
    re-installation of packages:

```{r}
#| eval: false
install.packages("rlang", force = TRUE)
```

2.  Load again the packages one by one,
3.  Ultimately, restart R session if all the packages are correctly
    installed and loaded (Image 4).

![Image 4: Restart R
session.](images/restart_rsession.png){#image-restart-rsession
align="center"}

## Debug functions

In this section we cover the functions `debugonce()` and `browser()`.

The function `debugonce()` allows us to set a one-time breakpoint in our
code. When entering `debugonce(function_name)`, it modifies the function
so that the following call triggers entry into debugging mode. This
allows us to intaractively debug the function and facilitates variable
inspection. Let's explore an example involving a custom filtering
function that contains an issue:

```{r}
#| error: true
subset_co2 <- function(filter_condition) {
  dplyr::filter(CO2, filter_condition)
}
subset_co2(uptake>35)
debugonce(subset_co2)
```

As evident from the displayed error message, the problem we encounter is
that the object "uptake" is not found. By runing the line
`debugonce(subset_co2)` and the `subset_co2()` function afterwards, we
enter the debug state as shown in Image 5. Using the "next", "continue"
and "stop" buttons that we can find just above the RStudio console, we
can sequentially navigate line by line through your function's debugging
process, and check the objects in our environment (Image 5A).

The `browser()` function will place the debugging state in this line.
So, you can place it where you think your problem is and start debugging
from there. We run the following code:

```{r}
#| error: true
subset_co2 <- function(filter_condition) {
  browser()
  dplyr::filter(CO2, filter_condition)
}
subset_co2(uptake>35)
debugonce(subset_co2)
```

We re-entered the debugging state again and input "filter_condition"
into the console (Image 5B). Once more, we observe that the condition
that we are providing to this function is not coming through. Therefore,
the problem does not come from within the function itself, the issue
lies in the code outside the function.

R is programming language founded for statistics rather than computer
science. [Non-standard evaluation]{.underline} refers to the mechanism
where code is evaluated dynamically by expressions rather than by its
value, allowing flexibility and a dynamic behavior. It is really useful
when you are writing statistical code, but it can potentially introduce
a cascade of errors when employed in situations requiring Standard
evaluation in the code strings.

The present issue is specifically tied to R and the tidyverse
environment: in Non-standard evaluation quotes are employed, while
Standard evaluation does not utilize quotes.

Previously, our filtering condition (uptake\>30) was employing
Non-standard evaluation. But, as "uptake" is not quoted, R interprets it
as an object. However, "uptake" is not an independent object; it exists
solely within the dataset.

In the tidyverse framework, this process is simplified, allowing for
unquoted input. However, it's crucial to distinguish when an element
inside a function involves Non-standard evaluation rather than Standard
evaluation. To address this, double curly brackets must be introduced
into the filtering condition (Image 5C). This revised code, will work
without issues. Once we confirm this, we can remove the `browser()`
line.

![Image 5: Debugging
functions](images/debugging_functions.png){align="center"}
